import java.net.*; 
import java.util.*;
import java.io.*; 
import java.awt.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;


public class Host {
	
	static Socket server;
	
	private String serverHostname;
	private String port;
	private String username;
	private String hostname;
	private String speed;
	
	/* Checks for the user being already connected */
    private boolean isConnected = false;

	
	@SuppressWarnings("resource")
    public static void main(String[] args) throws Exception {}
	
	
	
	/**
	 * 
	 * @param serverHostname
	 * @param port
	 * @param username
	 * @param hostname
	 */
	public void connectToServer(String serverHostname, String port, String username, String hostname, String speed) {
		
		/* Taking the parameters from the GUI */
		this.serverHostname = serverHostname;
		this.port = port;
		this.username = username;
		this.hostname = hostname;
		this.speed = speed;
		
		/* For reading text from the user */
	    Scanner input = new Scanner(System.in);
	    
	    /* This socket handles communicating main commands to server */
	    Socket controlSocket = null;
	    
	    /* QUIT controls the loop that listens for new command */
	    boolean quit = false;
	    
	    	    
	    /* This value handles the file transfer */
	    int recvMsgSize; 
	
	    /* This value holds the single string of the command */
	    String userCommand;
	    
	    /* This handles the control-line out stream */
	    PrintWriter outToServer_Control = null;
	    
	    /* This handles the control-line in stream */
	    Scanner inFromServer_Control = null;
	    
	    /**
	     * If not connected then connect to central server
	     */
	    
	    /* Only connect if NOT already connected */
	    if (isConnected == false){
	    	
	    	/* 
	    	 *  Establish a TCP connection with the server using the parameters
	     	 *  obtained from the user through the User Interface
	    	 */
		    try {
		        controlSocket = new Socket(serverHostname, 
		                             Integer.parseInt(port));
		        boolean controlSocketOpen = true;
		    } catch (Exception p) {
		        System.out.println("ERROR: Did not find socket!");
		    }
		                        
		    // Set-up the control-stream,
		    // if there's an error, report the non-connection.
		    try {
		        inFromServer_Control = 
		           new Scanner(controlSocket.getInputStream());
		        outToServer_Control = 
		           new PrintWriter(controlSocket.getOutputStream());
		        isConnected = true;
		        System.out.println("Connected to server!");
		    }
		    catch (Exception e) {
		        System.out.println("ERROR: Did not connect to " +
		            "server!");
		        isConnected = false;
		    } 
		    /* The following is largely generated by looking to this guide:
		     * https://www.mkyong.com/java/how-to-read-xml-file-in-java-dom-parser/
		     */
		    String totalDescriptions = "";
		    try {
		    	/* Prepare the document for XML extraction */
			    File fXmlFile = new File("HostedFiles.xml");
			    DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
			    DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			    Document doc = dBuilder.parse(fXmlFile);
			    
				//optional, but recommended
			    //read this - http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
			    doc.getDocumentElement().normalize();
			   
			    NodeList nList = doc.getElementsByTagName("File");
			    
			    /* For each "object," or, each file-description iterate */
			    /* Each iteration would send a string to the central-server */
			    /* TO-DO: (1) Look over this. (2) Implement the server listening for these strings. */
			  
			    
			    for (int temp = 0; temp < nList.getLength(); temp++) {
		
					Node nNode = nList.item(temp);
							
					if (nNode.getNodeType() == Node.ELEMENT_NODE) {
		
						Element eElement = (Element) nNode;
		
						/* NOTE - If later we want to include the display-name of the file */
						// String DisplayName =  eElement.getElementsByTagName("DisplayName").item(0);
						
						String FileName = eElement.getElementsByTagName("FileName").item(0).getTextContent();
						FileName = FileName.replaceAll(" ", "");	
						String KeyWords = "";
						int tmpLength = eElement.getElementsByTagName("Key").getLength();
					//	System.out.println("Number of keys to send over line:" + tmpLength);
						
						
						/* Louise and I weren't sure how we want to implement the following loop */
						//for(int i = 0; i < tmpLength; i++){
							KeyWords =  KeyWords + eElement.getElementsByTagName("Keywords").item(0).getTextContent();
					//		System.out.println(KeyWords);
						//}
							
						/* Removing added-whitespace. This could be an issue with how we grabbed the items. */
						KeyWords = KeyWords.replaceAll("\n", "");
						KeyWords = KeyWords.replaceAll("              ", " ");
						
						KeyWords = KeyWords.substring(1);
						

						String toSend = "FileName " + FileName  + " " + KeyWords;
						System.out.println("DEBUG: " + toSend);
						
						totalDescriptions = totalDescriptions +" "+ toSend;
						
						
						/* TO-DO: Send this line of files and their keys to the server */
						/* 	      We want to send a string for each file. Each string sent over the control-line
						 *        representing one file's keys. "toSend" above represents one line to send.
						 *        
						 * 		  Example string sent over line:  "myphoto.jpg 3 banana image jpeg"       
						 */
					}
				} 
			  
		    }
		    catch (Exception e) {
		    	e.printStackTrace();
		    } 
		    
		    
		    
		    /* Send userName, HostName, and speed to ClientHandler */
		    String userInformation = username + " " + hostname + " "+ speed + " " + totalDescriptions ;
		    outToServer_Control.println(userInformation);
		    System.out.println("DEBUG: " + totalDescriptions);
		    outToServer_Control.flush();
		    
		    
		   
	    }
	    /**
	     * Ends if statement
	     */
	    /* This loop to keep taking commands */
////	    while (!quit) {
////	        /* Menu sent to the user before every command */
////	        System.out.println("");
////	        System.out.println("Valid commands:"); 
////	        System.out.println("QUIT");
////	        System.out.println("KEYWORD");
////	        
////	        /* Take user command */
////	        userCommand = input.nextLine();
////	        
////	        String currentToken;
////	        /* Break the user command to tokens */
////	        StringTokenizer tokens = new StringTokenizer(userCommand);
////	        currentToken = tokens.nextToken();
////	        String Command = currentToken;
////	        userCommand = Command.toUpperCase();
////	        
////	        System.out.println(" ");
////	        
////	        /* Accidental No-Command */
////	        if (userCommand.equals("")){
////	            System.out.println("ERROR: No command entered.");
////	            continue;
////	        }
////	        
////	        /* Quit Command */
////	        else if (userCommand.equals("QUIT") && isConnected == true) {
////	            
////	            /* Tells the server that this client wants disconnect */
////	            String toSend = port + " " + "QUIT";
////	            outToServer_Control.println(toSend);
////	            outToServer_Control.flush();
////	            /* Tells the client to stop itself */
////	            quit = true;            
////	            
////	        /* Quit Command */
////	        } else if (userCommand.equals("QUIT") && isConnected == false) {
////	            /* Tells the client to stop itself */
////	            quit = true;
////	            
////	        /* Keyword Command */
////	        } else if (userCommand.contains("KEYWORD") 
////	                && isConnected == true) {  
////	        	
////	        	/*Pass the argument into the keyword */
////	        	String keyword;
////	            try {
////	            	keyword = tokens.nextToken();
////	            } catch (Exception e) {
////	               System.out.println("ERROR: Did not give arguement " +
////	                   "to STOR.");
////	               continue;
////	            }
////	            try {
////	                /* Send the request over the control line */
////	                String toSend = port + " " + "KEYWORD" + " " + 
////	                    keyword;
////	                outToServer_Control.println(toSend);
////	                outToServer_Control.flush();
////	            }catch (Exception e) {
////	            System.out.println("ERROR: Did not give " + 
////	                    "arguement to KEYWORD.");
////	                continue;
////	            }
////	        }
//    	
//        /* End of controlling while */
//	    }*/

	/* End of connectToServer() */
	}

/* End of FTP client */

}

//}
